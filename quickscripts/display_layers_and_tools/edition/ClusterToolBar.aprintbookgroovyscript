import org.barrelorgandiscovery.gui.aedit.*
import org.barrelorgandiscovery.virtualbook.*

import javax.swing.*
import java.awt.event.*
import java.awt.*

import org.barrelorgandiscovery.gui.aedit.toolbar.*
import org.barrelorgandiscovery.gui.aprintng.*



println(services.version)
if (services.version < "2020.12.666") {
    throw new Exception("bad version, 2020.12.666 minimum required")
}

// JOptionPane.showMessageDialog(null,"Punch Tool Activated")

class ClusterTool extends Tool {

    def pianoroll
    
    // position actuelle de la souris
    // utilisé pour l'affichage du texte
    Integer currentX = 0
    Integer currentY = 0
    
    // taille du trou pour les coups de poinçons
    double tailleTrou = 5.0
    
    
    def void activated() {
       //  JOptionPane.showMessageDialog(null,"activated " + pianoroll)
    }
    
    def void unactivated() {
     // JOptionPane.showMessageDialog(null,"unactivated")
    }
    
    def void paintElements(Graphics g) {
    
        double h = pianoroll.convertScreenXToCarton(currentX)
        def scale = pianoroll.virtualBook.scale

        g.drawString("" + tailleTrou + " mm" , currentX, currentY)
        
        for (int i = 0 ; i < scale.trackNb ; i ++) {
        
            // calcul de la position de la piste en mm
            def axis = pianoroll.trackToMM(i)
            def debut =  h
            
           
            def hauteurPiste = scale.intertrackHeight
            
            g.drawRect(pianoroll.convertCartonToScreenX(debut ), 
                       pianoroll.convertCartonToScreenY(axis - hauteurPiste/2),
                        pianoroll.MmToPixel(tailleTrou),
                        pianoroll.MmToPixel(hauteurPiste))
            
            
        }    
    }
    
    def void mouseMoved(MouseEvent e) {
          currentX = e.x
          currentY = e.y
          // on demande le réaffichage pour que le dessin
          // se fasse
          pianoroll.repaint()
    }
   
    def void mouseReleased(MouseEvent e) {

        double p =  pianoroll.convertScreenXToCarton(currentX)
        def scale = pianoroll.virtualBook.scale

            try {
              pianoroll.startEventTransaction();
                    try {

                       def us = pianoroll.undoStack
                       us.push(new GlobalVirtualBookUndoOperation(pianoroll.virtualBook, "Undo Cluster", pianoroll));
                                  
                       for (int i = 0 ; i < scale.trackNb ; i ++) {
                            // definition de la position du "trou", ou "matière à remettre sur le carton"
                            def h = new Hole(i, pianoroll.MMToTime(p), pianoroll.MMToTime(tailleTrou))
                             
                                if (e.button == MouseEvent.BUTTON1) {
                                    // on a clické sur le bouton gauche, on découpe le carton
                                    pianoroll.virtualBook.addAndMerge(h)                        
                                } else if (e.button == MouseEvent.BUTTON3) {
                                    // on a clické sur le bouton droit, on remet de la matière
                                    pianoroll.virtualBook.cutHoles(h)
                                }
                    } // for
                } finally {
                    pianoroll.endEventTransaction()
                }
                // pianoroll.repaint()
            } catch(Throwable t) {
                    // en cas d'erreur, on l'affiche
                    JOptionPane.showMessageDialog(null,t.message)
            }

    }
    
    void keyTyped(KeyEvent e) {
        // on a appuyé sur une touche
        // JOptionPane.showMessageDialog(null,e.keyChar)
        if (e.keyChar == '+') {
            tailleTrou = tailleTrou + 1
            pianoroll.repaint()
        } else if (e.keyChar == '-') {
            tailleTrou = tailleTrou -1
            pianoroll.repaint()
        }
    }
}

// création de la barre d'outils

def tb = new APrintNGToolAwareToolbar("ClusterToolbar", pianoroll)


def t = new ClusterTool( pianoroll: pianoroll  )
// ajout de l'outil dans la barre
def btn = tb.addTool(t, "Outil Cluster")


// ajout de la barre dans l'interface
toolbarspanel.add(tb);

toolbarspanel.revalidate()
toolbarspanel.repaint()


void




