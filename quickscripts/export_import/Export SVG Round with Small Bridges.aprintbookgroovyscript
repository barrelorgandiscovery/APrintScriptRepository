// Export SVG avec dexefer


import groovy.io.*
import org.jfree.graphics2d.svg.*
import java.awt.*
import java.awt.geom.*


// test the existence of dexefer.jar file in ~/aprintstudio folder
print SVGGraphics2D.class

// this is a parameter for dividing the big holes
cutWidth = 2.0; // 5 mm
cutBridges = 2.0;


// this are parameters for edges, choosing the cut parameters
edgesCut = 6.0;
edgesNonCut = 2.0;

def drawMultipleDashedLines(Graphics2D g2, double x, double width, double y) {
    double cumulatedWidth = 0;
    while (cumulatedWidth < width) {
        double currentLineWidth = Math.min(width - cumulatedWidth, edgesCut)
        if (currentLineWidth <= 0) {
            break;
        }
        Path2D.Double path = new Path2D.Double();
        path.moveTo(x + cumulatedWidth, y);
        path.lineTo(x + cumulatedWidth + currentLineWidth, y);
        g2.draw(path);
        cumulatedWidth += currentLineWidth + edgesNonCut;
    }
}

def drawRectangle(Graphics2D g2, double x, double y, double width, double height) {

    double cumulatedWidth = 0;

    while (cumulatedWidth < width) {
        double currentSmallHoleWidth = Math.min(width - cumulatedWidth, cutWidth)
        if (currentSmallHoleWidth <= 0) {
            break;
        }
        
        g2.draw(new Ellipse2D.Double(x + cumulatedWidth, y, currentSmallHoleWidth, height));
        
        cumulatedWidth += currentSmallHoleWidth + cutBridges;
    }
}


def scale = virtualbook.scale

def bookwidth = (int)scale.timeToMM(virtualbook.length)
SVGGraphics2D g2 = new SVGGraphics2D(bookwidth + 10,(int) scale.width + 10);

// draw the frame
  g2.color = Color.RED 
  def oldStroke = g2.stroke
/*  

  Stroke dashed = new BasicStroke(1, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 0, [9] as float[], 0);
  g2.stroke = dashed      
  g2.draw(new Rectangle2D.Double(0, 0, bookwidth, scale.width));
*/

drawMultipleDashedLines(g2, 0,bookwidth, 0)
drawMultipleDashedLines(g2, 0,bookwidth, scale.width)


  g2.color = Color.BLACK 
  g2.stroke = oldStroke
  
// draw the holes
virtualbook.holesCopy.each {

   double x = it.timestamp
   double x2 = x + it.timeLength
   double xmm = scale.timeToMM(x as Long)
   double x2mm = scale.timeToMM(x2 as Long)

   double y = scale.firstTrackAxis + it.track * scale.intertrackHeight
   double h = scale.trackWidth

   // g2.draw(new Rectangle2D.Double(xmm, y-h/2, x2mm-xmm, h));
   drawRectangle(g2, xmm, y-h/2, x2mm-xmm, h)

}

File f = File.createTempFile("test",".svg");
f.delete();

SVGUtils.writeToSVG(f, g2.getSVGElement());
  
f
