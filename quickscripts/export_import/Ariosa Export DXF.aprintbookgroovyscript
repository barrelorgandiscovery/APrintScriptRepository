// test d'export DXF avec dexefer
// modified 2020-11-15

import org.dexefer.*
import org.dexefer.entities.*
import org.dexefer.tables.*

import org.barrelorgandiscovery.virtualbook.*



double timeLengthOfTheBook = virtualbook.length / 1000000.0 // in seconds

double realdiskLinearMeasure =  (370 * Math.PI)    / (1 * 60 + 18) * timeLengthOfTheBook
println("Linear Measure : ${realdiskLinearMeasure}")

// must be a multiple of 8mm (4 mm hole, and then 4 mm metal)
double diskLinearMeasure = Math.ceil(realdiskLinearMeasure / 8) * 8;

double tuneExternalDiskRadius = realdiskLinearMeasure / Math.PI / 2
println("Tune External Disk Radius : ${tuneExternalDiskRadius}")

s = virtualbook.scale
tuneExternalInnerDiskRadius = tuneExternalDiskRadius - s.width
println("Inner Disk Radius : ${tuneExternalInnerDiskRadius}")

def pt(x, y) {
    return new DXFPoint(x, y)
}

def line(from, to) {
    return new Line(from, to)
}

// mise en place du fichier
d = new DXFFile()
d.tables.add(new VPort(pt(0,0), 1))


longueur = s.timeToMM(virtualbook.length)
print "Longueur du carton à transformer en cercle : " + longueur + " mm \n"

def arcpt(double angle1, double distanceCenter, double offsetx = 0, double offsety = 0)
{
    pt(distanceCenter * Math.cos(angle1) + offsetx, distanceCenter * Math.sin(angle1) + offsety)
}


def drawArc(double angle1, double angle2, double distanceCenter, double x, double y,int nbpt)
{
    (1..nbpt).each {
        double a  = (angle2 - angle1)/nbpt * (it - 1) + angle1;
        double a2  = (angle2 - angle1)/nbpt * it + angle1;
        d.entities.add(line(arcpt(a,distanceCenter, x, y),arcpt(a2,distanceCenter, x, y)))
    }
}

def drawArc(double angle1, double angle2, double distanceCenter, int nbpt)
{
    drawArc( angle1,  angle2,  distanceCenter, 0 , 0, nbpt)
}

def drawArc(double angle1, double angle2, double distanceCenter)
{
    drawArc(angle1,angle2,distanceCenter,10)
}

def drawHole(Hole h) {

    def c = { l -> s.timeToMM(l)/longueur * 2*Math.PI }
    
    def start = c(h.timestamp);
    def end = c(h.timestamp + h.length);
    def axe = h.track * s.intertrackHeight + s.firstTrackAxis + tuneExternalInnerDiskRadius
    def axeb =  axe - s.trackWidth / 2.0
    def axet =  axe + s.trackWidth / 2.0
    
    drawArc(start,end,axeb)
    drawArc(start,end, axet)
    d.entities.add(line(arcpt(start,axeb),arcpt(start,axet)))
    d.entities.add(line(arcpt(end,axeb),arcpt(end,axet)))
    
}

def readDoubleProperty(String name)
{
    def val = s.getProperty(name)
    if (val == null)
        throw new Exception("la propriete etendue " + name + " n'a pas été trouvée dans la définition de la gamme de l'instrument");

    double valeur = Double.parseDouble(val)
    valeur
}

def isPropertyExists(String name) 
{
    def val = s.getProperty(name)
    if (val == null) {
        return false
    }
    return true;
}

print "Dessin du contour \n"

// external ring draw
drawArc(0,2*Math.PI, tuneExternalDiskRadius, 100)
// inner ring draw
drawArc(0,2*Math.PI, tuneExternalInnerDiskRadius, 100) 

print "Dessin du trou central \n"


// dessin du trou central
//def rayontrou = readDoubleProperty("central_hole_size")
// drawArc(0,2*Math.PI, rayontrou, 100)

print "Dessin des trous\n"

// dessin des trous
virtualbook.holesCopy.each {
    drawHole(it)
}



// ecriture du resultat
print "Ecriture du resultat \n"

def f = File.createTempFile("test", ".dxf")
def fos = new BufferedOutputStream(new FileOutputStream(f))
d.write(fos)
fos.close()

print "Fichier de resultat créé :" + f.absolutePath + "\n"

